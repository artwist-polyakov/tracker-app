//
//  CreateTrackerViewController.swift
//  Tracker
//
//  Created by –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–æ–ª—è–∫–æ–≤ on 06.08.2023.
//

import Foundation
import UIKit
class CreateTrackerViewController: UIViewController {
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã UI
    let trackerNameField = UITextField()
    let selectCategoryButton = UIButton(type: .system)
    let createScheduleButton = UIButton(type: .system)
    let iconCollectionView: UICollectionView
    let colorCollectionView: UICollectionView
    
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫ –∏ —Ü–≤–µ—Ç–æ–≤
    let icons: [String] = ["üôÇ", "ü§©", "üòç", "ü•≥", "üòé", "üò¥", "üò§", "üò°", "ü•∫", "ü§î", "ü§®", "üôÉ", "üòá", "üòÇ", "ü§£", "üòÖ", "üòÜ", "üòÅ"] // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –∏–∫–æ–Ω–∫–∏
    let colors: [UIColor] = (1...18).compactMap { UIColor(named: "\($0)") }
    
    init() {
        let layout = UICollectionViewFlowLayout()
        iconCollectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        colorCollectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        setupUI()
        layoutUI()
    }
    
    private func setupUI() {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UITextField
        trackerNameField.placeholder = "–ò–º—è —Ç—Ä–µ–∫–µ—Ä–∞"
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        selectCategoryButton.setTitle("–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", for: .normal)
        selectCategoryButton.addTarget(self, action: #selector(handleSelectCategory), for: .touchUpInside)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        createScheduleButton.setTitle("–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", for: .normal)
        createScheduleButton.addTarget(self, action: #selector(handleCreateSchedule), for: .touchUpInside)
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–∫–æ–Ω–æ–∫
        iconCollectionView.dataSource = self
        iconCollectionView.delegate = self
        iconCollectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: "IconCell")
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
        colorCollectionView.dataSource = self
        colorCollectionView.delegate = self
        colorCollectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: "ColorCell")
    }
    
    private func layoutUI() {
        // –ó–¥–µ—Å—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–¥ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ, –≤–æ–∑–º–æ–∂–Ω–æ, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AutoLayout
    }
    
    @objc private func handleSelectCategory() {
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    }
    
    @objc private func handleCreateSchedule() {
        // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç–∫—Ä–∞–Ω—É —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    }
}

// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏
extension CreateTrackerViewController: UICollectionViewDataSource, UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if collectionView == iconCollectionView {
            return icons.count
        } else if collectionView == colorCollectionView {
            return colors.count
        }
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if collectionView == iconCollectionView {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "IconCell", for: indexPath)
            let label = UILabel(frame: cell.bounds)
            label.text = icons[indexPath.row]
            label.textAlignment = .center
            cell.contentView.addSubview(label)
            return cell
        } else if collectionView == colorCollectionView {
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ColorCell", for: indexPath)
            cell.backgroundColor = colors[indexPath.row]
            return cell
        }
        return UICollectionViewCell()
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if collectionView == iconCollectionView {
            // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä –∏–∫–æ–Ω–∫–∏
        } else if collectionView == colorCollectionView {
            // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
        }
    }
}
